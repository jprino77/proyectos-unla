#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class NoSeEncontraronResultadosException(TException):
    """
    Attributes:
     - codigo
     - descripcion
    """


    def __init__(self, codigo=None, descripcion=None,):
        self.codigo = codigo
        self.descripcion = descripcion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.codigo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.descripcion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NoSeEncontraronResultadosException')
        if self.codigo is not None:
            oprot.writeFieldBegin('codigo', TType.I32, 1)
            oprot.writeI32(self.codigo)
            oprot.writeFieldEnd()
        if self.descripcion is not None:
            oprot.writeFieldBegin('descripcion', TType.STRING, 2)
            oprot.writeString(self.descripcion.encode('utf-8') if sys.version_info[0] == 2 else self.descripcion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GenericException(TException):
    """
    Attributes:
     - codigo
     - descripcion
    """


    def __init__(self, codigo=None, descripcion=None,):
        self.codigo = codigo
        self.descripcion = descripcion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.codigo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.descripcion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GenericException')
        if self.codigo is not None:
            oprot.writeFieldBegin('codigo', TType.I32, 1)
            oprot.writeI32(self.codigo)
            oprot.writeFieldEnd()
        if self.descripcion is not None:
            oprot.writeFieldBegin('descripcion', TType.STRING, 2)
            oprot.writeString(self.descripcion.encode('utf-8') if sys.version_info[0] == 2 else self.descripcion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Deporte(object):
    """
    Attributes:
     - id
     - codigo
     - descripcion
    """


    def __init__(self, id=None, codigo=None, descripcion=None,):
        self.id = id
        self.codigo = codigo
        self.descripcion = descripcion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.codigo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.descripcion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Deporte')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.codigo is not None:
            oprot.writeFieldBegin('codigo', TType.STRING, 2)
            oprot.writeString(self.codigo.encode('utf-8') if sys.version_info[0] == 2 else self.codigo)
            oprot.writeFieldEnd()
        if self.descripcion is not None:
            oprot.writeFieldBegin('descripcion', TType.STRING, 3)
            oprot.writeString(self.descripcion.encode('utf-8') if sys.version_info[0] == 2 else self.descripcion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Filial(object):
    """
    Attributes:
     - id
     - nombre
     - calle
     - altura
    """


    def __init__(self, id=None, nombre=None, calle=None, altura=None,):
        self.id = id
        self.nombre = nombre
        self.calle = calle
        self.altura = altura

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nombre = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.calle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.altura = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Filial')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.nombre is not None:
            oprot.writeFieldBegin('nombre', TType.STRING, 2)
            oprot.writeString(self.nombre.encode('utf-8') if sys.version_info[0] == 2 else self.nombre)
            oprot.writeFieldEnd()
        if self.calle is not None:
            oprot.writeFieldBegin('calle', TType.STRING, 3)
            oprot.writeString(self.calle.encode('utf-8') if sys.version_info[0] == 2 else self.calle)
            oprot.writeFieldEnd()
        if self.altura is not None:
            oprot.writeFieldBegin('altura', TType.STRING, 4)
            oprot.writeString(self.altura.encode('utf-8') if sys.version_info[0] == 2 else self.altura)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Usuario(object):
    """
    Attributes:
     - nombre
     - apellido
     - calle
     - altura
     - localidad
     - telefono
     - email
     - fechaNAcimiento
     - usuario
     - clave
    """


    def __init__(self, nombre=None, apellido=None, calle=None, altura=None, localidad=None, telefono=None, email=None, fechaNAcimiento=None, usuario=None, clave=None,):
        self.nombre = nombre
        self.apellido = apellido
        self.calle = calle
        self.altura = altura
        self.localidad = localidad
        self.telefono = telefono
        self.email = email
        self.fechaNAcimiento = fechaNAcimiento
        self.usuario = usuario
        self.clave = clave

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.nombre = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.apellido = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.calle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.altura = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.localidad = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.telefono = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.fechaNAcimiento = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.usuario = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.clave = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Usuario')
        if self.nombre is not None:
            oprot.writeFieldBegin('nombre', TType.STRING, 1)
            oprot.writeString(self.nombre.encode('utf-8') if sys.version_info[0] == 2 else self.nombre)
            oprot.writeFieldEnd()
        if self.apellido is not None:
            oprot.writeFieldBegin('apellido', TType.STRING, 2)
            oprot.writeString(self.apellido.encode('utf-8') if sys.version_info[0] == 2 else self.apellido)
            oprot.writeFieldEnd()
        if self.calle is not None:
            oprot.writeFieldBegin('calle', TType.STRING, 3)
            oprot.writeString(self.calle.encode('utf-8') if sys.version_info[0] == 2 else self.calle)
            oprot.writeFieldEnd()
        if self.altura is not None:
            oprot.writeFieldBegin('altura', TType.I32, 4)
            oprot.writeI32(self.altura)
            oprot.writeFieldEnd()
        if self.localidad is not None:
            oprot.writeFieldBegin('localidad', TType.I32, 5)
            oprot.writeI32(self.localidad)
            oprot.writeFieldEnd()
        if self.telefono is not None:
            oprot.writeFieldBegin('telefono', TType.STRING, 6)
            oprot.writeString(self.telefono.encode('utf-8') if sys.version_info[0] == 2 else self.telefono)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 7)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.fechaNAcimiento is not None:
            oprot.writeFieldBegin('fechaNAcimiento', TType.STRING, 8)
            oprot.writeString(self.fechaNAcimiento.encode('utf-8') if sys.version_info[0] == 2 else self.fechaNAcimiento)
            oprot.writeFieldEnd()
        if self.usuario is not None:
            oprot.writeFieldBegin('usuario', TType.STRING, 9)
            oprot.writeString(self.usuario.encode('utf-8') if sys.version_info[0] == 2 else self.usuario)
            oprot.writeFieldEnd()
        if self.clave is not None:
            oprot.writeFieldBegin('clave', TType.STRING, 10)
            oprot.writeString(self.clave.encode('utf-8') if sys.version_info[0] == 2 else self.clave)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(NoSeEncontraronResultadosException)
NoSeEncontraronResultadosException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'codigo', None, None, ),  # 1
    (2, TType.STRING, 'descripcion', 'UTF8', None, ),  # 2
)
all_structs.append(GenericException)
GenericException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'codigo', None, None, ),  # 1
    (2, TType.STRING, 'descripcion', 'UTF8', None, ),  # 2
)
all_structs.append(Deporte)
Deporte.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'id', None, None, ),  # 1
    (2, TType.STRING, 'codigo', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'descripcion', 'UTF8', None, ),  # 3
)
all_structs.append(Filial)
Filial.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'id', None, None, ),  # 1
    (2, TType.STRING, 'nombre', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'calle', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'altura', 'UTF8', None, ),  # 4
)
all_structs.append(Usuario)
Usuario.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'nombre', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'apellido', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'calle', 'UTF8', None, ),  # 3
    (4, TType.I32, 'altura', None, None, ),  # 4
    (5, TType.I32, 'localidad', None, None, ),  # 5
    (6, TType.STRING, 'telefono', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'email', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'fechaNAcimiento', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'usuario', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'clave', 'UTF8', None, ),  # 10
)
fix_spec(all_structs)
del all_structs
