/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package server;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-03")
public class Filial implements org.apache.thrift.TBase<Filial, Filial._Fields>, java.io.Serializable, Cloneable, Comparable<Filial> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Filial");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NOMBRE_FIELD_DESC = new org.apache.thrift.protocol.TField("nombre", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CALLE_FIELD_DESC = new org.apache.thrift.protocol.TField("calle", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ALTURA_FIELD_DESC = new org.apache.thrift.protocol.TField("altura", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FilialStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FilialTupleSchemeFactory();

  public int id; // required
  public java.lang.String nombre; // required
  public java.lang.String calle; // required
  public java.lang.String altura; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NOMBRE((short)2, "nombre"),
    CALLE((short)3, "calle"),
    ALTURA((short)4, "altura");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NOMBRE
          return NOMBRE;
        case 3: // CALLE
          return CALLE;
        case 4: // ALTURA
          return ALTURA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NOMBRE, new org.apache.thrift.meta_data.FieldMetaData("nombre", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALLE, new org.apache.thrift.meta_data.FieldMetaData("calle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALTURA, new org.apache.thrift.meta_data.FieldMetaData("altura", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Filial.class, metaDataMap);
  }

  public Filial() {
  }

  public Filial(
    int id,
    java.lang.String nombre,
    java.lang.String calle,
    java.lang.String altura)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.nombre = nombre;
    this.calle = calle;
    this.altura = altura;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Filial(Filial other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetNombre()) {
      this.nombre = other.nombre;
    }
    if (other.isSetCalle()) {
      this.calle = other.calle;
    }
    if (other.isSetAltura()) {
      this.altura = other.altura;
    }
  }

  public Filial deepCopy() {
    return new Filial(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.nombre = null;
    this.calle = null;
    this.altura = null;
  }

  public int getId() {
    return this.id;
  }

  public Filial setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public java.lang.String getNombre() {
    return this.nombre;
  }

  public Filial setNombre(java.lang.String nombre) {
    this.nombre = nombre;
    return this;
  }

  public void unsetNombre() {
    this.nombre = null;
  }

  /** Returns true if field nombre is set (has been assigned a value) and false otherwise */
  public boolean isSetNombre() {
    return this.nombre != null;
  }

  public void setNombreIsSet(boolean value) {
    if (!value) {
      this.nombre = null;
    }
  }

  public java.lang.String getCalle() {
    return this.calle;
  }

  public Filial setCalle(java.lang.String calle) {
    this.calle = calle;
    return this;
  }

  public void unsetCalle() {
    this.calle = null;
  }

  /** Returns true if field calle is set (has been assigned a value) and false otherwise */
  public boolean isSetCalle() {
    return this.calle != null;
  }

  public void setCalleIsSet(boolean value) {
    if (!value) {
      this.calle = null;
    }
  }

  public java.lang.String getAltura() {
    return this.altura;
  }

  public Filial setAltura(java.lang.String altura) {
    this.altura = altura;
    return this;
  }

  public void unsetAltura() {
    this.altura = null;
  }

  /** Returns true if field altura is set (has been assigned a value) and false otherwise */
  public boolean isSetAltura() {
    return this.altura != null;
  }

  public void setAlturaIsSet(boolean value) {
    if (!value) {
      this.altura = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.Integer)value);
      }
      break;

    case NOMBRE:
      if (value == null) {
        unsetNombre();
      } else {
        setNombre((java.lang.String)value);
      }
      break;

    case CALLE:
      if (value == null) {
        unsetCalle();
      } else {
        setCalle((java.lang.String)value);
      }
      break;

    case ALTURA:
      if (value == null) {
        unsetAltura();
      } else {
        setAltura((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NOMBRE:
      return getNombre();

    case CALLE:
      return getCalle();

    case ALTURA:
      return getAltura();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NOMBRE:
      return isSetNombre();
    case CALLE:
      return isSetCalle();
    case ALTURA:
      return isSetAltura();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Filial)
      return this.equals((Filial)that);
    return false;
  }

  public boolean equals(Filial that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_nombre = true && this.isSetNombre();
    boolean that_present_nombre = true && that.isSetNombre();
    if (this_present_nombre || that_present_nombre) {
      if (!(this_present_nombre && that_present_nombre))
        return false;
      if (!this.nombre.equals(that.nombre))
        return false;
    }

    boolean this_present_calle = true && this.isSetCalle();
    boolean that_present_calle = true && that.isSetCalle();
    if (this_present_calle || that_present_calle) {
      if (!(this_present_calle && that_present_calle))
        return false;
      if (!this.calle.equals(that.calle))
        return false;
    }

    boolean this_present_altura = true && this.isSetAltura();
    boolean that_present_altura = true && that.isSetAltura();
    if (this_present_altura || that_present_altura) {
      if (!(this_present_altura && that_present_altura))
        return false;
      if (!this.altura.equals(that.altura))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + id;

    hashCode = hashCode * 8191 + ((isSetNombre()) ? 131071 : 524287);
    if (isSetNombre())
      hashCode = hashCode * 8191 + nombre.hashCode();

    hashCode = hashCode * 8191 + ((isSetCalle()) ? 131071 : 524287);
    if (isSetCalle())
      hashCode = hashCode * 8191 + calle.hashCode();

    hashCode = hashCode * 8191 + ((isSetAltura()) ? 131071 : 524287);
    if (isSetAltura())
      hashCode = hashCode * 8191 + altura.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Filial other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNombre()).compareTo(other.isSetNombre());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNombre()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nombre, other.nombre);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCalle()).compareTo(other.isSetCalle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calle, other.calle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAltura()).compareTo(other.isSetAltura());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAltura()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.altura, other.altura);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Filial(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nombre:");
    if (this.nombre == null) {
      sb.append("null");
    } else {
      sb.append(this.nombre);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("calle:");
    if (this.calle == null) {
      sb.append("null");
    } else {
      sb.append(this.calle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("altura:");
    if (this.altura == null) {
      sb.append("null");
    } else {
      sb.append(this.altura);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FilialStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FilialStandardScheme getScheme() {
      return new FilialStandardScheme();
    }
  }

  private static class FilialStandardScheme extends org.apache.thrift.scheme.StandardScheme<Filial> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Filial struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NOMBRE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nombre = iprot.readString();
              struct.setNombreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CALLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.calle = iprot.readString();
              struct.setCalleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ALTURA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.altura = iprot.readString();
              struct.setAlturaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Filial struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.nombre != null) {
        oprot.writeFieldBegin(NOMBRE_FIELD_DESC);
        oprot.writeString(struct.nombre);
        oprot.writeFieldEnd();
      }
      if (struct.calle != null) {
        oprot.writeFieldBegin(CALLE_FIELD_DESC);
        oprot.writeString(struct.calle);
        oprot.writeFieldEnd();
      }
      if (struct.altura != null) {
        oprot.writeFieldBegin(ALTURA_FIELD_DESC);
        oprot.writeString(struct.altura);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FilialTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FilialTupleScheme getScheme() {
      return new FilialTupleScheme();
    }
  }

  private static class FilialTupleScheme extends org.apache.thrift.scheme.TupleScheme<Filial> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Filial struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetNombre()) {
        optionals.set(1);
      }
      if (struct.isSetCalle()) {
        optionals.set(2);
      }
      if (struct.isSetAltura()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetNombre()) {
        oprot.writeString(struct.nombre);
      }
      if (struct.isSetCalle()) {
        oprot.writeString(struct.calle);
      }
      if (struct.isSetAltura()) {
        oprot.writeString(struct.altura);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Filial struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nombre = iprot.readString();
        struct.setNombreIsSet(true);
      }
      if (incoming.get(2)) {
        struct.calle = iprot.readString();
        struct.setCalleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.altura = iprot.readString();
        struct.setAlturaIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

